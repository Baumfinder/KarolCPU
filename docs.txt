-- Befehle (10) --

0.  hlt - stoppt cpu
1.  lda  [addr]  X : lädt Wert von Adresse in Akkumulator
2.  sta  [addr]  X : speichert Wert von Akkumulator nach Adresse
3.  add  [addr]  X : addiert Wert von Addresse zu Akkumulator und speichert Ergebnis im Akkumulator (A + M -> A)
4.  neg          X : Negiert Akkumulator (-A -> A)
5.  jmp  [num]   X : springt zu Instruktion [num]
6.  jz   [num]   X : springt zu Instruktion [num], wenn Akkumulator Null ist
7.  ldad [addr]  X : lädt Wert der Adresse in [addr] in den Akkumulator ([[addr]] -> A)
8.  stad [addr]  X : speichert Wert von Akkumulator in der Adresse in [addr] (A -> [[addr]])
9.  mka  [num]   X : speichert [num] in Akkumulator
10. Extension    X : Nächster Befehl ist eine Extended-Instruktion

-- Extended Befehle (10) --

11. call [num]   X : Speichert akt. Instr im Callstack, Spring zu Instruktion [num]
12. ret          X : Springt zu oberster [num] im Callstack
13. jnz  [num]   - : springt zu Instruktion [num], wenn Akkumulator nicht Null ist
14. jp   [num]   - : springt zu Instruktion [num], wenn Akkumulator positivk

Assembler:
	- label [name] : label für sprünge
	- var [name] [addr] : benennt speicheradressen

